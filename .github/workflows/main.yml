name: NodeJS App CI/CD 

on:
  push:
    branches:
      - main

env:
  PROJECT_NUMBER: 987121777525
  PROJECT_ID: ${{ vars.PROJECT_ID }}
  GAR_LOCATION: us-central1
  GKE_CLUSTER: ${{ vars.GKE_CLUSTER }}
  GKE_ZONE: us-central1
  DEPLOYMENT_NAME: nodejs-app-deploy
  REPOSITORY: clouddemo
  REPOSITORY_REGION: us-central1
  IMAGE: nodejs-app
  # WORKLOAD_IDENTITY_PROVIDER: ${{ vars.WORKLOAD_IDENTITY_PROVIDER }}

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout
        uses: 'actions/checkout@v4'

    # Use if want to push to Docker Hub
      # - name: Login to Docker Hub
      #   uses: docker/login-action@v3
      #   with:
      #     username: ${{ vars.DOCKER_USERNAME }}
      #     password: ${{ secrets.DOCKERHUB_TOKEN }}

      # - name: Set up Docker Buildx
      #   uses: docker/setup-buildx-action@v3

      # - name: Build and test
      #   uses: docker/build-push-action@v6
      #   with:
      #     target: test
      #     load: true

      # - name: Build and push
      #   uses: docker/build-push-action@v6
      #   with:
      #     platforms: linux/amd64,linux/arm64
      #     push: true
      #     target: prod
      #     tags: ${{ vars.DOCKER_USERNAME }}/${{ github.event.repository.name }}:latest

    
    # Use if want to push to Google Artifact Registry
      - name: Obtain access token by using workload identity federation
        id: 'auth'
        uses: 'google-github-actions/auth@v2'
        with:
          create_credentials_file: false
          token_format: access_token
          workload_identity_provider: projects/${{ env.PROJECT_NUMBER }}/locations/global/workloadIdentityPools/github-actions/providers/github-actions-oidc
          service_account: github-actions-workflow@${{ env.PROJECT_ID }}.iam.gserviceaccount.com

      - name: Login to Google Artifact Registry (GAR)
        uses: docker/login-action@v3
        with:
          registry: ${{ env.GAR_LOCATION }}-docker.pkg.dev
          username: oauth2accesstoken
          password: ${{ steps.auth.outputs.access_token }}

      - name: Connect to GKE
        uses: google-github-actions/get-gke-credentials@v2
        with:
          cluster_name: ${{ env.GKE_CLUSTER }}
          location: ${{ env.GKE_ZONE }}
    
      - name: Create image tag
        run: echo "IMAGE_TAG=${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE }}:$GITHUB_SHA" >> $GITHUB_ENV

      - name: Lock image version in deployment.yaml
        run: sed -i 's|CLOUDDEMO_IMAGE|${{ env.IMAGE_TAG }}|g' applications/${{ env.IMAGE }}/nodejs/deployment.yaml

      - name: Build Docker image
        run: docker build --tag "${{ env.IMAGE_TAG }}" applications/${{ env.IMAGE }}/nodejs

      - name: Publish Docker image to Google Artifact Registry
        run: docker push "${{ env.IMAGE_TAG }}"
      

  deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: 'Set up Kustomize'
        run: |-
          curl -sfLo kustomize https://github.com/kubernetes-sigs/kustomize/releases/download/kustomize%2Fv5.4.3/kustomize_v5.4.3_linux_amd64.tar.gz
          chmod u+x ./kustomize

      - name: 'Deploy to GKE'
        run: |-
          # replacing the image name in the k8s template
          ./kustomize edit set image ${{ env.IMAGE_TAG }}
          ./kustomize build . | kubectl apply -f -
          kubectl rollout status deployment/${{ env.DEPLOYMENT_NAME }}
          kubectl get services -o wide
  